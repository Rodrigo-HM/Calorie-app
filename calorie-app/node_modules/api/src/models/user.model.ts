import { db } from "../db";
import { v4 as uuid } from "uuid";

export type User = {
    id: string;
    email: string;
    emailNorm?: string; // Nuevo: persistimos normalizado si no existe
    passwordHash: string;
    createdAt: string;
};

const normalize = (e: string) => e.trim().toLowerCase();

export const UserModel = {
    getByEmail(email: string): User | undefined {
        db.read();
        const emailNorm = normalize(email);
        const users = db.data!.users as User[];
        return users.find(u => (u.emailNorm ?? normalize(u.email)) === emailNorm);
    },

    create(email: string, passwordHash: string): User {
        db.read();
        const users = db.data!.users as User[];
        const emailNorm = normalize(email);

        const exists = users.some(u => (u.emailNorm ?? normalize(u.email)) === emailNorm);
        if (exists) {
        throw Object.assign(new Error("EMAIL_TAKEN"), { code: "EMAIL_TAKEN" });
        }

        const user: User = {
        id: uuid(),
        email,
        emailNorm,
        passwordHash,
        createdAt: new Date().toISOString(),
        };

    users.push(user);
    db.write();
    return user;
},

    getById(id: string): User | undefined {
        db.read();
        return (db.data!.users as User[]).find(u => u.id === id);
    },
};
