import { error } from "console";
import type { Request, Response, NextFunction } from "express";
import jwt from "jsonwebtoken";

const JWT_SECRET = process.env.JWT_SECRET || "dev_secret_change_me";

type JwtPayload = { sub: string; email?: string; iat?: number; exp?: number };
export type AuthenticatedRequest = Request & { user?: JwtPayload };

function extractBearerToken(h?: string): string | null {
  if (!h) return null;
  return h.startsWith("Bearer ") ? h.slice(7).trim() : null;
}

export function auth(req: AuthenticatedRequest, res: Response, next: NextFunction) {
  const token = extractBearerToken(req.headers.authorization as string | undefined);

  if (process.env.NODE_ENV === "test") {
    if (!token || token === "test") {
      req.user = { sub: "test-user" };
      return next();
    }
    try {
      req.user = jwt.verify(token, JWT_SECRET) as JwtPayload;
      return next();
    } catch {
      return res.status(401).json({ error: "Token inválido" });
    }
  }

  if (!token) return res.status(401).json({ error: "No token" });

  try {
    req.user = jwt.verify(token, JWT_SECRET) as JwtPayload;
    return next();
  } catch {
    return res.status(401).json({ error: "Token inválido" });
  }
}
